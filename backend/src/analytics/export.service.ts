import { Injectable } from '@nestjs/common';
import { Response } from 'express';
const ExcelJS = require('exceljs');
const PDFDocument = require('pdfkit');
const { createObjectCsvWriter } = require('csv-writer');
import { join } from 'path';
import { createWriteStream, unlinkSync } from 'fs';
import { ReportFilterDto } from './dto/analytics-filter.dto';
import {
  PerformanceMetrics,
  GeographicPerformance,
  SubjectPerformance,
} from './data-aggregation.service';
import { TrendAnalysis } from './trend-analysis.service';

export interface ReportData {
  title: string;
  titleKh: string;
  generatedAt: Date;
  generatedBy: string;
  filters: any;
  performanceMetrics?: PerformanceMetrics;
  geographicPerformance?: GeographicPerformance[];
  subjectPerformance?: SubjectPerformance[];
  trendAnalysis?: TrendAnalysis[];
  summary?: ReportSummary;
}

export interface ReportSummary {
  keyFindings: string[];
  keyFindingsKh: string[];
  recommendations: string[];
  recommendationsKh: string[];
  period: string;
  scope: string;
  scopeKh: string;
}

@Injectable()
export class ExportService {
  async exportReport(
    reportData: ReportData,
    format: 'pdf' | 'excel' | 'csv',
    language: 'en' | 'km' = 'en',
    response: Response,
  ): Promise<void> {
    const filename = this.generateFilename(reportData.title, format);

    switch (format) {
      case 'pdf':
        await this.exportToPDF(reportData, language, response, filename);
        break;
      case 'excel':
        await this.exportToExcel(reportData, language, response, filename);
        break;
      case 'csv':
        await this.exportToCSV(reportData, language, response, filename);
        break;
      default:
        throw new Error(`Unsupported export format: ${format}`);
    }
  }

  private async exportToPDF(
    reportData: ReportData,
    language: 'en' | 'km',
    response: Response,
    filename: string,
  ): Promise<void> {
    const doc = new PDFDocument({ margin: 50 });

    // Set response headers
    response.setHeader('Content-Type', 'application/pdf');
    response.setHeader('Content-Disposition', `attachment; filename="${filename}"`);

    // Pipe the PDF to response
    doc.pipe(response);

    // Add title
    const title = language === 'km' ? reportData.titleKh : reportData.title;
    doc.fontSize(20).font('Helvetica-Bold').text(title, { align: 'center' });
    doc.moveDown();

    // Add metadata
    doc
      .fontSize(12)
      .font('Helvetica')
      .text(`Generated: ${reportData.generatedAt.toLocaleDateString()}`)
      .text(`Generated by: ${reportData.generatedBy}`)
      .moveDown();

    // Add performance metrics section
    if (reportData.performanceMetrics) {
      this.addPerformanceMetricsSection(doc, reportData.performanceMetrics, language);
    }

    // Add geographic performance section
    if (reportData.geographicPerformance) {
      this.addGeographicPerformanceSection(doc, reportData.geographicPerformance, language);
    }

    // Add subject performance section
    if (reportData.subjectPerformance) {
      this.addSubjectPerformanceSection(doc, reportData.subjectPerformance, language);
    }

    // Add trend analysis section
    if (reportData.trendAnalysis) {
      this.addTrendAnalysisSection(doc, reportData.trendAnalysis, language);
    }

    // Add summary section
    if (reportData.summary) {
      this.addSummarySection(doc, reportData.summary, language);
    }

    // Finalize the PDF
    doc.end();
  }

  private async exportToExcel(
    reportData: ReportData,
    language: 'en' | 'km',
    response: Response,
    filename: string,
  ): Promise<void> {
    const workbook = new ExcelJS.Workbook();

    // Set workbook properties
    workbook.creator = reportData.generatedBy;
    workbook.created = reportData.generatedAt;
    workbook.title = language === 'km' ? reportData.titleKh : reportData.title;

    // Add summary worksheet
    const summarySheet = workbook.addWorksheet('Summary');
    this.addSummaryWorksheet(summarySheet, reportData, language);

    // Add performance metrics worksheet
    if (reportData.performanceMetrics) {
      const metricsSheet = workbook.addWorksheet('Performance Metrics');
      this.addPerformanceMetricsWorksheet(metricsSheet, reportData.performanceMetrics, language);
    }

    // Add geographic performance worksheet
    if (reportData.geographicPerformance) {
      const geoSheet = workbook.addWorksheet('Geographic Performance');
      this.addGeographicPerformanceWorksheet(geoSheet, reportData.geographicPerformance, language);
    }

    // Add subject performance worksheet
    if (reportData.subjectPerformance) {
      const subjectSheet = workbook.addWorksheet('Subject Performance');
      this.addSubjectPerformanceWorksheet(subjectSheet, reportData.subjectPerformance, language);
    }

    // Add trend analysis worksheet
    if (reportData.trendAnalysis) {
      const trendSheet = workbook.addWorksheet('Trend Analysis');
      this.addTrendAnalysisWorksheet(trendSheet, reportData.trendAnalysis, language);
    }

    // Set response headers and send file
    response.setHeader(
      'Content-Type',
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    );
    response.setHeader('Content-Disposition', `attachment; filename="${filename}"`);

    await workbook.xlsx.write(response);
  }

  private async exportToCSV(
    reportData: ReportData,
    language: 'en' | 'km',
    response: Response,
    filename: string,
  ): Promise<void> {
    // For CSV, we'll export the most important data - performance metrics and geographic performance
    const csvData = [];

    // Add header information
    csvData.push({
      type: 'Header',
      title: language === 'km' ? reportData.titleKh : reportData.title,
      generated: reportData.generatedAt.toISOString(),
      generatedBy: reportData.generatedBy,
    });

    // Add performance metrics
    if (reportData.performanceMetrics) {
      csvData.push({
        type: 'Performance Metrics',
        totalSessions: reportData.performanceMetrics.totalSessions,
        completedSessions: reportData.performanceMetrics.completedSessions,
        averageScore: reportData.performanceMetrics.averageScore,
        completionRate: reportData.performanceMetrics.completionRate,
        improvementPlansCreated: reportData.performanceMetrics.improvementPlansCreated,
        activeUsers: reportData.performanceMetrics.activeUsers,
      });
    }

    // Add geographic performance data
    if (reportData.geographicPerformance) {
      reportData.geographicPerformance.forEach((geo) => {
        csvData.push({
          type: 'Geographic Performance',
          entityId: geo.entityId,
          entityName: language === 'km' ? geo.entityNameKh : geo.entityName,
          entityType: geo.entityType,
          totalSessions: geo.totalSessions,
          averageScore: geo.averageScore,
          completionRate: geo.completionRate,
          improvementRate: geo.improvementRate,
          ranking: geo.ranking,
        });
      });
    }

    // Create temporary CSV file
    const tempFilePath = join(process.cwd(), 'temp', `${Date.now()}-${filename}`);
    const csvWriter = createObjectCsvWriter({
      path: tempFilePath,
      header: Object.keys(csvData[0] || {}).map((key) => ({ id: key, title: key })),
      encoding: 'utf8',
    });

    await csvWriter.writeRecords(csvData);

    // Set response headers and send file
    response.setHeader('Content-Type', 'text/csv; charset=utf-8');
    response.setHeader('Content-Disposition', `attachment; filename="${filename}"`);

    // Add BOM for proper UTF-8 encoding in Excel
    response.write('\ufeff');

    const fileStream = createWriteStream(tempFilePath);
    fileStream.pipe(response);

    // Clean up temp file after sending
    fileStream.on('end', () => {
      try {
        unlinkSync(tempFilePath);
      } catch (error) {
        console.error('Error cleaning up temp file:', error);
      }
    });
  }

  private addPerformanceMetricsSection(
    doc: any,
    metrics: PerformanceMetrics,
    language: 'en' | 'km',
  ): void {
    const title = language === 'km' ? 'ការវាស់វែងការអនុវត្ត' : 'Performance Metrics';
    doc.fontSize(16).font('Helvetica-Bold').text(title).moveDown();

    doc
      .fontSize(12)
      .font('Helvetica')
      .text(`Total Sessions: ${metrics.totalSessions}`)
      .text(`Completed Sessions: ${metrics.completedSessions}`)
      .text(`Average Score: ${metrics.averageScore.toFixed(2)}`)
      .text(`Completion Rate: ${metrics.completionRate.toFixed(1)}%`)
      .text(`Improvement Plans Created: ${metrics.improvementPlansCreated}`)
      .text(`Active Users: ${metrics.activeUsers}`)
      .moveDown();

    // Add top performing indicators
    if (metrics.topPerformingIndicators.length > 0) {
      const indicatorTitle =
        language === 'km' ? 'សូចនាករដែលមានការអនុវត្តល្អ' : 'Top Performing Indicators';
      doc.fontSize(14).font('Helvetica-Bold').text(indicatorTitle).moveDown(0.5);

      metrics.topPerformingIndicators.forEach((indicator, index) => {
        const name = language === 'km' ? indicator.indicatorNameKh : indicator.indicatorName;
        doc
          .fontSize(10)
          .font('Helvetica')
          .text(
            `${index + 1}. ${name}: ${indicator.averageScore.toFixed(2)} (${indicator.responseCount} responses)`,
          );
      });
      doc.moveDown();
    }
  }

  private addGeographicPerformanceSection(
    doc: any,
    geoPerformance: GeographicPerformance[],
    language: 'en' | 'km',
  ): void {
    const title = language === 'km' ? 'ការអនុវត្តតាមតំបន់ភូមិសាស្ត្រ' : 'Geographic Performance';
    doc.fontSize(16).font('Helvetica-Bold').text(title).moveDown();

    geoPerformance.slice(0, 10).forEach((geo, index) => {
      const name = language === 'km' ? geo.entityNameKh : geo.entityName;
      doc
        .fontSize(10)
        .font('Helvetica')
        .text(`${geo.ranking}. ${name}`)
        .text(
          `   Sessions: ${geo.totalSessions}, Avg Score: ${geo.averageScore.toFixed(2)}, Completion: ${geo.completionRate.toFixed(1)}%`,
        )
        .moveDown(0.3);
    });
    doc.moveDown();
  }

  private addSubjectPerformanceSection(
    doc: any,
    subjectPerformance: SubjectPerformance[],
    language: 'en' | 'km',
  ): void {
    const title = language === 'km' ? 'ការអនុវត្តតាមមុខវិជ្ជា' : 'Subject Performance';
    doc.fontSize(16).font('Helvetica-Bold').text(title).moveDown();

    subjectPerformance.forEach((subject) => {
      const name = language === 'km' ? subject.subjectKh : subject.subject;
      doc.fontSize(12).font('Helvetica-Bold').text(name);
      doc
        .fontSize(10)
        .font('Helvetica')
        .text(`Total Sessions: ${subject.totalSessions}`)
        .text(`Average Score: ${subject.averageScore.toFixed(2)}`)
        .moveDown(0.5);
    });
  }

  private addTrendAnalysisSection(
    doc: any,
    trendAnalysis: TrendAnalysis[],
    language: 'en' | 'km',
  ): void {
    const title = language === 'km' ? 'ការវិភាគទំនោរ' : 'Trend Analysis';
    doc.fontSize(16).font('Helvetica-Bold').text(title).moveDown();

    trendAnalysis.forEach((trend) => {
      const name = language === 'km' ? trend.metricNameKh : trend.metricName;
      doc.fontSize(12).font('Helvetica-Bold').text(name);
      doc
        .fontSize(10)
        .font('Helvetica')
        .text(`Current Value: ${trend.currentValue.toFixed(2)}`)
        .text(
          `Change: ${trend.overallChange > 0 ? '+' : ''}${trend.overallChange.toFixed(2)} (${trend.overallChangePercent.toFixed(1)}%)`,
        )
        .text(`Trend: ${trend.overallTrend}`)
        .moveDown(0.5);
    });
  }

  private addSummarySection(doc: any, summary: ReportSummary, language: 'en' | 'km'): void {
    const title = language === 'km' ? 'សង្ខេប' : 'Summary';
    doc.fontSize(16).font('Helvetica-Bold').text(title).moveDown();

    // Key findings
    const findingsTitle = language === 'km' ? 'រកឃើញសំខាន់ៗ' : 'Key Findings';
    doc.fontSize(14).font('Helvetica-Bold').text(findingsTitle).moveDown(0.5);

    const findings = language === 'km' ? summary.keyFindingsKh : summary.keyFindings;
    findings.forEach((finding, index) => {
      doc
        .fontSize(10)
        .font('Helvetica')
        .text(`${index + 1}. ${finding}`);
    });
    doc.moveDown();

    // Recommendations
    const recommendationsTitle = language === 'km' ? 'អនុសាសន៍' : 'Recommendations';
    doc.fontSize(14).font('Helvetica-Bold').text(recommendationsTitle).moveDown(0.5);

    const recommendations = language === 'km' ? summary.recommendationsKh : summary.recommendations;
    recommendations.forEach((recommendation, index) => {
      doc
        .fontSize(10)
        .font('Helvetica')
        .text(`${index + 1}. ${recommendation}`);
    });
  }

  private addSummaryWorksheet(sheet: any, reportData: ReportData, language: 'en' | 'km'): void {
    // Add title
    sheet.mergeCells('A1:D1');
    sheet.getCell('A1').value = language === 'km' ? reportData.titleKh : reportData.title;
    sheet.getCell('A1').font = { bold: true, size: 16 };
    sheet.getCell('A1').alignment = { horizontal: 'center' };

    // Add metadata
    sheet.getCell('A3').value = 'Generated:';
    sheet.getCell('B3').value = reportData.generatedAt;
    sheet.getCell('A4').value = 'Generated by:';
    sheet.getCell('B4').value = reportData.generatedBy;

    // Add performance summary if available
    if (reportData.performanceMetrics) {
      sheet.getCell('A6').value = 'Performance Summary';
      sheet.getCell('A6').font = { bold: true };

      sheet.getCell('A7').value = 'Total Sessions:';
      sheet.getCell('B7').value = reportData.performanceMetrics.totalSessions;

      sheet.getCell('A8').value = 'Average Score:';
      sheet.getCell('B8').value = reportData.performanceMetrics.averageScore;

      sheet.getCell('A9').value = 'Completion Rate:';
      sheet.getCell('B9').value = `${reportData.performanceMetrics.completionRate.toFixed(1)}%`;
    }
  }

  private addPerformanceMetricsWorksheet(
    sheet: any,
    metrics: PerformanceMetrics,
    language: 'en' | 'km',
  ): void {
    // Add headers
    const headers = language === 'km' ? ['ការវាស់វែង', 'តម្លៃ'] : ['Metric', 'Value'];

    sheet.addRow(headers);
    sheet.getRow(1).font = { bold: true };

    // Add data
    const metricsData = [
      ['Total Sessions', metrics.totalSessions],
      ['Completed Sessions', metrics.completedSessions],
      ['Average Score', metrics.averageScore.toFixed(2)],
      ['Completion Rate', `${metrics.completionRate.toFixed(1)}%`],
      ['Improvement Plans Created', metrics.improvementPlansCreated],
      ['Active Users', metrics.activeUsers],
      ['Average Session Duration (minutes)', metrics.averageSessionDuration.toFixed(1)],
    ];

    metricsData.forEach(([metric, value]) => {
      sheet.addRow([metric, value]);
    });

    // Auto-fit columns
    sheet.columns.forEach((column) => {
      column.width = 25;
    });
  }

  private addGeographicPerformanceWorksheet(
    sheet: any,
    geoPerformance: GeographicPerformance[],
    language: 'en' | 'km',
  ): void {
    // Add headers
    const headers =
      language === 'km'
        ? [
            'ចំណាត់ថ្នាក់',
            'ឈ្មោះ',
            'ប្រភេទ',
            'វគ្គសរុប',
            'ពិន្ទុមធ្យម',
            'អត្រាបញ្ចប់',
            'អត្រាកែលម្អ',
          ]
        : [
            'Rank',
            'Name',
            'Type',
            'Total Sessions',
            'Average Score',
            'Completion Rate',
            'Improvement Rate',
          ];

    sheet.addRow(headers);
    sheet.getRow(1).font = { bold: true };

    // Add data
    geoPerformance.forEach((geo) => {
      const name = language === 'km' ? geo.entityNameKh : geo.entityName;
      sheet.addRow([
        geo.ranking,
        name,
        geo.entityType,
        geo.totalSessions,
        geo.averageScore.toFixed(2),
        `${geo.completionRate.toFixed(1)}%`,
        `${geo.improvementRate.toFixed(1)}%`,
      ]);
    });

    // Auto-fit columns
    sheet.columns.forEach((column) => {
      column.width = 20;
    });
  }

  private addSubjectPerformanceWorksheet(
    sheet: any,
    subjectPerformance: SubjectPerformance[],
    language: 'en' | 'km',
  ): void {
    // Add headers
    const headers =
      language === 'km'
        ? ['មុខវិជ្ជា', 'វគ្គសរុប', 'ពិន្ទុមធ្យម', 'ទំនោរកែលម្អ']
        : ['Subject', 'Total Sessions', 'Average Score', 'Improvement Trend'];

    sheet.addRow(headers);
    sheet.getRow(1).font = { bold: true };

    // Add data
    subjectPerformance.forEach((subject) => {
      const name = language === 'km' ? subject.subjectKh : subject.subject;
      sheet.addRow([
        name,
        subject.totalSessions,
        subject.averageScore.toFixed(2),
        subject.improvementTrend.toFixed(2),
      ]);
    });

    // Auto-fit columns
    sheet.columns.forEach((column) => {
      column.width = 25;
    });
  }

  private addTrendAnalysisWorksheet(
    sheet: any,
    trendAnalysis: TrendAnalysis[],
    language: 'en' | 'km',
  ): void {
    // Add headers
    const headers =
      language === 'km'
        ? ['ការវាស់វែង', 'តម្លៃបច្ចុប្បន្ន', 'ការផ្លាស់ប្តូរ', 'ទំនោរ']
        : ['Metric', 'Current Value', 'Change', 'Trend'];

    sheet.addRow(headers);
    sheet.getRow(1).font = { bold: true };

    // Add data
    trendAnalysis.forEach((trend) => {
      const name = language === 'km' ? trend.metricNameKh : trend.metricName;
      sheet.addRow([
        name,
        trend.currentValue.toFixed(2),
        `${trend.overallChange > 0 ? '+' : ''}${trend.overallChange.toFixed(2)} (${trend.overallChangePercent.toFixed(1)}%)`,
        trend.overallTrend,
      ]);
    });

    // Auto-fit columns
    sheet.columns.forEach((column) => {
      column.width = 25;
    });
  }

  private generateFilename(title: string, format: string): string {
    const timestamp = new Date().toISOString().split('T')[0];
    const cleanTitle = title.replace(/[^a-zA-Z0-9]/g, '_').toLowerCase();
    return `${cleanTitle}_${timestamp}.${format}`;
  }
}
